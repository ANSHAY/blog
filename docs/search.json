[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Anshay’s Blog",
    "section": "",
    "text": "Intro to Deep Learning with fastai\n\n\n\n\n\n\nDeep Learning\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Intro to DeepLearning with fastai/index.html",
    "href": "posts/Intro to DeepLearning with fastai/index.html",
    "title": "Intro to Deep Learning with fastai",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "posts/intro_to_dl_with_fastai/index.html",
    "href": "posts/intro_to_dl_with_fastai/index.html",
    "title": "Intro to Deep Learning with fastai",
    "section": "",
    "text": "1. Introduction\nDeep learning is a part of machine learning that uses neural networks with many layers—hence the name “deep”—to analyze different types of data. It has changed the game in areas like computer vision, natural language processing, and speech recognition, allowing machines to do tasks that we once thought only humans could do.\nA neural network works a bit like our brain. Each neuron in the network takes in several inputs, combines them in a certain way, and then uses a mathematical function to produce an output. When you connect many neurons together, you create a layer, and stacking multiple layers forms a neural network.\nIn this blog post, I won’t go into the technical details of neural networks and deep learning. Instead, I want to show you how to use the fastai library to quickly build and train deep learning models. Fastai is a user-friendly library built on top of PyTorch that makes it easy to create and train models with just a few lines of code.\nYou don’t even need to buy a powerful GPU to get started. We can use free GPU access available on platforms like Kaggle and Google Colab. In the following sections, I’ll walk you through a simple example, showing you all the steps you need to take to use fastai for your deep learning projects.\n\n\n2. What is Fastai?\nFastai was designed to make deep learning easier and more accessible, allowing anyone to achieve impressive results with just a little bit of code. It simplifies the process of building deep learning models by taking care of the complicated details for you. At the same time, it gives you the flexibility to adjust various settings and parameters to customize the models according to your needs.\n\n\n3. Setting Up Your Environment\nBefore we get started, it’s important to set up your environment properly. Creating a separate environment is a good practice because it helps keep your main setup clean and prevents any issues if something goes wrong. An environment is simply a collection of libraries that your program needs to run.\nIn this guide, I’ll show you how to create an environment using Conda, but there are other methods available online if you want to explore those.\n\n\nPrerequisites:\n\nPython: Make sure you have Python 3.11 or later installed.\nJupyter Notebook: This is the best platform for running Fastai code.\n\n\n\nInstallation Steps:\n\nFirst, download and install Anaconda or Miniconda from the official website: Installation.\n\nCreate a new environment by running this command (use latest python version):\nconda create -n fastai-env python=3.11\nActivate your new environment with:\nconda activate fastai-env\nInstall Fastai using pip by running:\npip install fastai\n\nSetting Up Jupyter Notebooks:\n\nTo install Jupyter, run:\npip install notebook\nFinally, launch Jupyter Notebook with:\njupyter notebook\n\nNow you’re all set up and ready to start working with Fastai!\n\n\n4. Starting with Fastai\nFirst, I’ll show you the complete code that trains a simple model to determine whether an input image is of a bird or not. After that, I’ll break down each step so you can understand what’s happening and feel more connected to the code.\nFastai makes it easy to build deep learning models by streamlining the process. The main steps involve creating a dataloader (which loads your data) and a learner (an object that trains the model). Fastai offers various DataBlocks for different types of data, making it straightforward to set up your data.\nIn this example, we’ll use a specific type of learner called vision_learner, which is designed for image classification tasks. This learner handles the training process and all the details involved. All you need to do is specify which model you want to use and provide the dataloader. If you want more control, you can also adjust many parameters to fine-tune the training process.\nLet first see the full code:\n# imports\nfrom duckduckgo_search import DDGS\nfrom fastcore.all import *\nfrom fastai.vision.all import *\nfrom fastai.vision.widgets import ImageClassifierCleaner\nfrom fastdownload import download_url\nimport time\n\n# func to search images\ndef search_images_ddg(topic, max=100):\n  urls = L(DDGS().images(keywords=topic, max_results=max)).itemgot('image')\n  return urls\n\ntopics = \"birds\", \"forest\"\npath = Path('bird_or_not')\n\nfor topic in topics:\n  dest = path/topic\n  dest.mkdir(exist_ok=True, parents=True)\n  download_images(dest, urls=search_images_ddg(topic))\n  time.sleep(5)\n  resize_images(dest, max_seiz=400, dest=dest)\n\n# remove invalid images\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\n# define dataloader\ndls = DataBlock(blocks=(ImageBlock, CategoryBlock),\n                get_items=get_image_files,\n                splitter=RandomSplitter(seed=32),\n                get_y=parent_label,\n                item_tfms=[Resize(192, method='squish')]\n                ).dataloaders(path, bs=32)\n\n# show some images from the batch\ndls.show_batch(max_n=6)\n\n# define a learner\nlearn = vision_learner(dls, resnet50, metrics=error_rate)\n\n# fine tune the model\nlearn.fine_tune(2)\n\n# Interpret the results\ninterp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()\n\n# see where the losses are highest\ninterp.plot_top_losses(5, nrows=1)\n\n# save your model\nmodelFile = \"bird_or_not.pkl\"\nlearn.export(modelFile)\n\n# predict on a new image\nimage = \"bird.jpg\"\nlearn.predict(image)\nLet’s break this down step by step.\nTo train a model, we first need some data. In this case, we want to create a model that can classify images as either containing a bird or not. So, we’ll use two categories: “birds” and “forest” (the latter representing images without birds).\ntopics = \"birds\", \"forest\"\npath = Path('bird_or_not')\nNext, we’ll download the images using DuckDuckGo’s image search API. Before you do this, make sure to install the duckduckgo_search package by running pip install duckduckgo_search in your terminal.\nHere’s how we can search for images:\nfrom duckduckgo_search import DDGS\n\ndef search_images_ddg(topic, max=100):\n    urls = L(DDGS().images(keywords=topic, max_results=max)).itemgot('image')\n    return urls\nThis function takes a topic and returns a list of URLs for images related to that topic.\nNow, for each topic, we’ll download the images from the URLs we just got. We’ll use the download_images function from Fastai and then resize the images to a smaller, fixed size.\nfor topic in topics:\n    dest = path/topic\n    dest.mkdir(exist_ok=True, parents=True)  # Create a folder for the topic if it doesn't exist\n    download_images(dest, urls=search_images_ddg(topic))  # Download the images\n    time.sleep(5)  # Pause for a moment to avoid overwhelming the server\n    resize_images(dest, max_size=400, dest=dest)  # Resize the images\nSince some of the downloaded files might not be valid images, Fastai provides a function to check for any errors. We’ll remove any invalid images before moving on.\n# Remove invalid images\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)  # Delete the invalid images\nlen(failed)  # Check how many images were removed\nThis way, we ensure that we only keep valid images for training our model.\nOnce we have our data ready, the next step is to define the dataloader and the learner before we can train the model.\n\n\nDefining the Dataloader\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock),\n    get_items=get_image_files,\n    splitter=RandomSplitter(seed=32),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path, bs=32)\nIn this code, we set up the DataBlock, which tells Fastai what our input and output will be. The ImageBlock represents the input images, while the CategoryBlock represents the output categories (either “Bird” or “Forest”).\nThe get_items parameter specifies a function to load the images. The splitter is crucial because it divides the data into training and validation sets. This is important for evaluating how well the model performs on new, unseen data. If we only tested the model on the training data, we wouldn’t get an accurate picture of its performance, as it has already seen that data.\nThe RandomSplitter() function splits the dataset, and by default, it uses 20% of the data for validation. You can adjust this fraction if needed.\nThe get_y parameter needs a function to determine the label for each image. In this case, we use parent_label, which assigns the label based on the name of the parent directory. This works well since we have separate folders for “birds” and “forest.”\nThe item_tfms parameter allows us to apply transformations to the data before training. Here, we’re simply resizing the images, and the method squish ensures that the entire image fits into the specified size.\nOnce the dataloader is set up, we can also take a look at the images in our dataset.\ndls.show_batch(max_n=6)\n\n\nDefining the Learner\nNow that we have our dataloader ready, we can define the learner:\nlearn = vision_learner(dls, resnet50, metrics=error_rate)\nThe learner is a high-level object in Fastai that simplifies the training process. You just need to provide the dataloader we created, the model you want to use (in this case, resnet50), and the metric for evaluating the model’s performance (we’re using error_rate).\nWe’re using a pretrained model because training a model from scratch can be quite complex and time-consuming. Using a pretrained model and fine-tuning it on our dataset is known as transfer learning. Fastai makes this easy with just one line of code.\n\n\nFine-Tuning the Model\nlearn.fine_tune(2)\nHere, the parameter specifies the number of epochs for training. Since our task is a straightforward classification problem, we can achieve good results even with a small number of epochs. This is one of the great advantages of using Fastai!\n\n\nInterpreting the Results\nAfter training your model, you can interpret the results using the following code:\ninterp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()\nThis will create a confusion matrix, which helps you see how well the model is performing across different categories. You can also check where the model is struggling the most by plotting the top losses:\ninterp.plot_top_losses(5, nrows=1)\nThis will show you the five images where the model had the highest losses, giving you insight into where it might be making mistakes.\n\n\nSaving Your Model\nIt’s important to save your trained model so you can use it later. You can easily export it to a pickle file with this code:\nmodelFile = \"bird_or_not.pkl\"\nlearn.export(modelFile)\n\n\nMaking Predictions\nTo run inference on a new image, you can use the predict function in the learner and provide the path to the image:\nimage = 'bird.jpg'  # path to the image\nlearn.predict(image)\nAs you can see, Fastai makes it very simple and quick to train a model and get good results. In just a few lines of code, we downloaded images from the internet, trained a classifier, and made predictions on new images.\n\n\nWhat’s Next?\nIn the next blog post, I’ll cover how to upload this model online and create a web interface where you can upload an image and classify it in real-time.\nFeel free to run the code above and see how it works. If you encounter any issues, a quick search online can help you find solutions to most problems.\nIn this blog post, we explored the basics of deep learning and how Fastai simplifies the process of building and training models. We walked through an example of creating a classifier by fine-tuning a ResNet model using images downloaded from the internet.\nAs you start your deep learning journey, remember that practice is essential. Experiment with different datasets, try out various models, and engage with the community. Fastai offers the tools and resources you need to succeed, whether you’re just starting or have some experience under your belt.\n\n\nUseful Links and Resources\n\n1. Fastai Documentation and Tutorials\n\nFastai Documentation: Check out the official Fastai Documentation for detailed guides and references.\nFastai Course: Enroll in the Practical Deep Learning for Coders course to learn deep learning hands-on.\n\n\n\n2. Recommended Book\n\n“Deep Learning for Coders with Fastai and PyTorch”: You can find this helpful book on Amazon.\n\n\n\n3. Online Communities and Forums\n\nFastai Forums: Join the Fastai Community Forums to connect with other learners and experts.\nStack Overflow: For specific questions, check the Fastai Tag on Stack Overflow.\nReddit - Machine Learning: Engage with the community on r/MachineLearning.\n\n\n\n4. Case Studies and Examples\n\nFastai GitHub Repository: Explore the Fastai GitHub for the source code and additional resources.\nKaggle Datasets and Notebooks: Visit Kaggle for datasets and notebooks to practice your skills.\nFastai Examples Repository: Check out the Fastai Examples for practical examples and projects.\n\n\n\n5. Additional Learning Resources\n\nYouTube - Fastai Lectures: Watch lectures and tutorials on the Fastai YouTube Channel to deepen your understanding.\n\nThese resources will help you further your knowledge and skills in deep learning with Fastai!"
  }
]